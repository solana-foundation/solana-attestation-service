/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type CloseAttestationEvent = {
  discriminator: number;
  schema: Address;
  attestationData: ReadonlyUint8Array;
};

export type CloseAttestationEventArgs = CloseAttestationEvent;

export function getCloseAttestationEventEncoder(): Encoder<CloseAttestationEventArgs> {
  return getStructEncoder([
    ['discriminator', getU8Encoder()],
    ['schema', getAddressEncoder()],
    [
      'attestationData',
      addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()),
    ],
  ]);
}

export function getCloseAttestationEventDecoder(): Decoder<CloseAttestationEvent> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['schema', getAddressDecoder()],
    [
      'attestationData',
      addDecoderSizePrefix(getBytesDecoder(), getU32Decoder()),
    ],
  ]);
}

export function getCloseAttestationEventCodec(): Codec<
  CloseAttestationEventArgs,
  CloseAttestationEvent
> {
  return combineCodec(
    getCloseAttestationEventEncoder(),
    getCloseAttestationEventDecoder()
  );
}
