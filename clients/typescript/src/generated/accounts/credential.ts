/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type Credential = {
  discriminator: number;
  authority: Address;
  name: ReadonlyUint8Array;
  authorizedSigners: Array<Address>;
};

export type CredentialArgs = Credential;

export function getCredentialEncoder(): Encoder<CredentialArgs> {
  return getStructEncoder([
    ['discriminator', getU8Encoder()],
    ['authority', getAddressEncoder()],
    ['name', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ['authorizedSigners', getArrayEncoder(getAddressEncoder())],
  ]);
}

export function getCredentialDecoder(): Decoder<Credential> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['authority', getAddressDecoder()],
    ['name', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['authorizedSigners', getArrayDecoder(getAddressDecoder())],
  ]);
}

export function getCredentialCodec(): Codec<CredentialArgs, Credential> {
  return combineCodec(getCredentialEncoder(), getCredentialDecoder());
}

export function decodeCredential<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Credential, TAddress>;
export function decodeCredential<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Credential, TAddress>;
export function decodeCredential<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Credential, TAddress> | MaybeAccount<Credential, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCredentialDecoder()
  );
}

export async function fetchCredential<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Credential, TAddress>> {
  const maybeAccount = await fetchMaybeCredential(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCredential<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Credential, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCredential(maybeAccount);
}

export async function fetchAllCredential(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Credential>[]> {
  const maybeAccounts = await fetchAllMaybeCredential(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCredential(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Credential>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeCredential(maybeAccount));
}
