/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedChangeAuthorizedSignersInstruction,
  type ParsedChangeSchemaDescriptionInstruction,
  type ParsedChangeSchemaStatusInstruction,
  type ParsedChangeSchemaVersionInstruction,
  type ParsedCloseAttestationInstruction,
  type ParsedCreateAttestationInstruction,
  type ParsedCreateCredentialInstruction,
  type ParsedCreateSchemaInstruction,
  type ParsedEmitEventInstruction,
  type ParsedTokenizeSchemaInstruction,
} from '../instructions';

export const SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS =
  'DXaNS83fJzVYxaVzjeEQCp5p1txfU4fZPUcBR1X2p76o' as Address<'DXaNS83fJzVYxaVzjeEQCp5p1txfU4fZPUcBR1X2p76o'>;

export enum SolanaAttestationServiceAccount {
  Attestation,
  Credential,
  Schema,
}

export enum SolanaAttestationServiceInstruction {
  CreateCredential,
  CreateSchema,
  ChangeSchemaStatus,
  ChangeAuthorizedSigners,
  ChangeSchemaDescription,
  ChangeSchemaVersion,
  CreateAttestation,
  CloseAttestation,
  EmitEvent,
  TokenizeSchema,
}

export function identifySolanaAttestationServiceInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SolanaAttestationServiceInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return SolanaAttestationServiceInstruction.CreateCredential;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return SolanaAttestationServiceInstruction.CreateSchema;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return SolanaAttestationServiceInstruction.ChangeSchemaStatus;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return SolanaAttestationServiceInstruction.ChangeAuthorizedSigners;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return SolanaAttestationServiceInstruction.ChangeSchemaDescription;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return SolanaAttestationServiceInstruction.ChangeSchemaVersion;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return SolanaAttestationServiceInstruction.CreateAttestation;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return SolanaAttestationServiceInstruction.CloseAttestation;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return SolanaAttestationServiceInstruction.EmitEvent;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return SolanaAttestationServiceInstruction.TokenizeSchema;
  }
  throw new Error(
    'The provided instruction could not be identified as a solanaAttestationService instruction.'
  );
}

export type ParsedSolanaAttestationServiceInstruction<
  TProgram extends string = 'DXaNS83fJzVYxaVzjeEQCp5p1txfU4fZPUcBR1X2p76o',
> =
  | ({
      instructionType: SolanaAttestationServiceInstruction.CreateCredential;
    } & ParsedCreateCredentialInstruction<TProgram>)
  | ({
      instructionType: SolanaAttestationServiceInstruction.CreateSchema;
    } & ParsedCreateSchemaInstruction<TProgram>)
  | ({
      instructionType: SolanaAttestationServiceInstruction.ChangeSchemaStatus;
    } & ParsedChangeSchemaStatusInstruction<TProgram>)
  | ({
      instructionType: SolanaAttestationServiceInstruction.ChangeAuthorizedSigners;
    } & ParsedChangeAuthorizedSignersInstruction<TProgram>)
  | ({
      instructionType: SolanaAttestationServiceInstruction.ChangeSchemaDescription;
    } & ParsedChangeSchemaDescriptionInstruction<TProgram>)
  | ({
      instructionType: SolanaAttestationServiceInstruction.ChangeSchemaVersion;
    } & ParsedChangeSchemaVersionInstruction<TProgram>)
  | ({
      instructionType: SolanaAttestationServiceInstruction.CreateAttestation;
    } & ParsedCreateAttestationInstruction<TProgram>)
  | ({
      instructionType: SolanaAttestationServiceInstruction.CloseAttestation;
    } & ParsedCloseAttestationInstruction<TProgram>)
  | ({
      instructionType: SolanaAttestationServiceInstruction.EmitEvent;
    } & ParsedEmitEventInstruction<TProgram>)
  | ({
      instructionType: SolanaAttestationServiceInstruction.TokenizeSchema;
    } & ParsedTokenizeSchemaInstruction<TProgram>);
