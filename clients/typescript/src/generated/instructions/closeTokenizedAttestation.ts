/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_TOKENIZED_ATTESTATION_DISCRIMINATOR = 10;

export function getCloseTokenizedAttestationDiscriminatorBytes() {
  return getU8Encoder().encode(CLOSE_TOKENIZED_ATTESTATION_DISCRIMINATOR);
}

export type CloseTokenizedAttestationInstruction<
  TProgram extends string = typeof SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountCredential extends string | IAccountMeta<string> = string,
  TAccountAttestation extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountAttestationProgram extends string | IAccountMeta<string> = string,
  TAccountAttestationMint extends string | IAccountMeta<string> = string,
  TAccountSasPda extends string | IAccountMeta<string> = string,
  TAccountAttestationTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountCredential extends string
        ? ReadonlyAccount<TAccountCredential>
        : TAccountCredential,
      TAccountAttestation extends string
        ? WritableAccount<TAccountAttestation>
        : TAccountAttestation,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAttestationProgram extends string
        ? ReadonlyAccount<TAccountAttestationProgram>
        : TAccountAttestationProgram,
      TAccountAttestationMint extends string
        ? WritableAccount<TAccountAttestationMint>
        : TAccountAttestationMint,
      TAccountSasPda extends string
        ? ReadonlyAccount<TAccountSasPda>
        : TAccountSasPda,
      TAccountAttestationTokenAccount extends string
        ? WritableAccount<TAccountAttestationTokenAccount>
        : TAccountAttestationTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseTokenizedAttestationInstructionData = {
  discriminator: number;
};

export type CloseTokenizedAttestationInstructionDataArgs = {};

export function getCloseTokenizedAttestationInstructionDataEncoder(): Encoder<CloseTokenizedAttestationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: CLOSE_TOKENIZED_ATTESTATION_DISCRIMINATOR,
    })
  );
}

export function getCloseTokenizedAttestationInstructionDataDecoder(): Decoder<CloseTokenizedAttestationInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getCloseTokenizedAttestationInstructionDataCodec(): Codec<
  CloseTokenizedAttestationInstructionDataArgs,
  CloseTokenizedAttestationInstructionData
> {
  return combineCodec(
    getCloseTokenizedAttestationInstructionDataEncoder(),
    getCloseTokenizedAttestationInstructionDataDecoder()
  );
}

export type CloseTokenizedAttestationInput<
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountCredential extends string = string,
  TAccountAttestation extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAttestationProgram extends string = string,
  TAccountAttestationMint extends string = string,
  TAccountSasPda extends string = string,
  TAccountAttestationTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  /** Authorized signer of the Schema's Credential */
  authority: TransactionSigner<TAccountAuthority>;
  credential: Address<TAccountCredential>;
  attestation: Address<TAccountAttestation>;
  eventAuthority: Address<TAccountEventAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  attestationProgram: Address<TAccountAttestationProgram>;
  /** Mint of Attestation Token */
  attestationMint: Address<TAccountAttestationMint>;
  /** Program derived address used as program signer authority */
  sasPda: Address<TAccountSasPda>;
  /** Associated token account of the related Attestation Token */
  attestationTokenAccount: Address<TAccountAttestationTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getCloseTokenizedAttestationInstruction<
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountCredential extends string,
  TAccountAttestation extends string,
  TAccountEventAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountAttestationProgram extends string,
  TAccountAttestationMint extends string,
  TAccountSasPda extends string,
  TAccountAttestationTokenAccount extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends
    Address = typeof SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS,
>(
  input: CloseTokenizedAttestationInput<
    TAccountPayer,
    TAccountAuthority,
    TAccountCredential,
    TAccountAttestation,
    TAccountEventAuthority,
    TAccountSystemProgram,
    TAccountAttestationProgram,
    TAccountAttestationMint,
    TAccountSasPda,
    TAccountAttestationTokenAccount,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CloseTokenizedAttestationInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountAuthority,
  TAccountCredential,
  TAccountAttestation,
  TAccountEventAuthority,
  TAccountSystemProgram,
  TAccountAttestationProgram,
  TAccountAttestationMint,
  TAccountSasPda,
  TAccountAttestationTokenAccount,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    credential: { value: input.credential ?? null, isWritable: false },
    attestation: { value: input.attestation ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    attestationProgram: {
      value: input.attestationProgram ?? null,
      isWritable: false,
    },
    attestationMint: { value: input.attestationMint ?? null, isWritable: true },
    sasPda: { value: input.sasPda ?? null, isWritable: false },
    attestationTokenAccount: {
      value: input.attestationTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.credential),
      getAccountMeta(accounts.attestation),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.attestationProgram),
      getAccountMeta(accounts.attestationMint),
      getAccountMeta(accounts.sasPda),
      getAccountMeta(accounts.attestationTokenAccount),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCloseTokenizedAttestationInstructionDataEncoder().encode({}),
  } as CloseTokenizedAttestationInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountCredential,
    TAccountAttestation,
    TAccountEventAuthority,
    TAccountSystemProgram,
    TAccountAttestationProgram,
    TAccountAttestationMint,
    TAccountSasPda,
    TAccountAttestationTokenAccount,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedCloseTokenizedAttestationInstruction<
  TProgram extends string = typeof SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    /** Authorized signer of the Schema's Credential */
    authority: TAccountMetas[1];
    credential: TAccountMetas[2];
    attestation: TAccountMetas[3];
    eventAuthority: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    attestationProgram: TAccountMetas[6];
    /** Mint of Attestation Token */
    attestationMint: TAccountMetas[7];
    /** Program derived address used as program signer authority */
    sasPda: TAccountMetas[8];
    /** Associated token account of the related Attestation Token */
    attestationTokenAccount: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
  };
  data: CloseTokenizedAttestationInstructionData;
};

export function parseCloseTokenizedAttestationInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseTokenizedAttestationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      authority: getNextAccount(),
      credential: getNextAccount(),
      attestation: getNextAccount(),
      eventAuthority: getNextAccount(),
      systemProgram: getNextAccount(),
      attestationProgram: getNextAccount(),
      attestationMint: getNextAccount(),
      sasPda: getNextAccount(),
      attestationTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getCloseTokenizedAttestationInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
