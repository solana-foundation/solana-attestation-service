/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CHANGE_SCHEMA_STATUS_DISCRIMINATOR = 2;

export function getChangeSchemaStatusDiscriminatorBytes() {
  return getU8Encoder().encode(CHANGE_SCHEMA_STATUS_DISCRIMINATOR);
}

export type ChangeSchemaStatusInstruction<
  TProgram extends string = typeof SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountCredential extends string | IAccountMeta<string> = string,
  TAccountSchema extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountCredential extends string
        ? ReadonlyAccount<TAccountCredential>
        : TAccountCredential,
      TAccountSchema extends string
        ? WritableAccount<TAccountSchema>
        : TAccountSchema,
      ...TRemainingAccounts,
    ]
  >;

export type ChangeSchemaStatusInstructionData = {
  discriminator: number;
  isPaused: boolean;
};

export type ChangeSchemaStatusInstructionDataArgs = { isPaused: boolean };

export function getChangeSchemaStatusInstructionDataEncoder(): Encoder<ChangeSchemaStatusInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['isPaused', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CHANGE_SCHEMA_STATUS_DISCRIMINATOR })
  );
}

export function getChangeSchemaStatusInstructionDataDecoder(): Decoder<ChangeSchemaStatusInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['isPaused', getBooleanDecoder()],
  ]);
}

export function getChangeSchemaStatusInstructionDataCodec(): Codec<
  ChangeSchemaStatusInstructionDataArgs,
  ChangeSchemaStatusInstructionData
> {
  return combineCodec(
    getChangeSchemaStatusInstructionDataEncoder(),
    getChangeSchemaStatusInstructionDataDecoder()
  );
}

export type ChangeSchemaStatusInput<
  TAccountAuthority extends string = string,
  TAccountCredential extends string = string,
  TAccountSchema extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  /** Credential the Schema is associated with */
  credential: Address<TAccountCredential>;
  /** Credential the Schema is associated with */
  schema: Address<TAccountSchema>;
  isPaused: ChangeSchemaStatusInstructionDataArgs['isPaused'];
};

export function getChangeSchemaStatusInstruction<
  TAccountAuthority extends string,
  TAccountCredential extends string,
  TAccountSchema extends string,
  TProgramAddress extends
    Address = typeof SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS,
>(
  input: ChangeSchemaStatusInput<
    TAccountAuthority,
    TAccountCredential,
    TAccountSchema
  >,
  config?: { programAddress?: TProgramAddress }
): ChangeSchemaStatusInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountCredential,
  TAccountSchema
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    credential: { value: input.credential ?? null, isWritable: false },
    schema: { value: input.schema ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.credential),
      getAccountMeta(accounts.schema),
    ],
    programAddress,
    data: getChangeSchemaStatusInstructionDataEncoder().encode(
      args as ChangeSchemaStatusInstructionDataArgs
    ),
  } as ChangeSchemaStatusInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountCredential,
    TAccountSchema
  >;

  return instruction;
}

export type ParsedChangeSchemaStatusInstruction<
  TProgram extends string = typeof SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    /** Credential the Schema is associated with */
    credential: TAccountMetas[1];
    /** Credential the Schema is associated with */
    schema: TAccountMetas[2];
  };
  data: ChangeSchemaStatusInstructionData;
};

export function parseChangeSchemaStatusInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedChangeSchemaStatusInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      credential: getNextAccount(),
      schema: getNextAccount(),
    },
    data: getChangeSchemaStatusInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
