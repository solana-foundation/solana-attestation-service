/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CHANGE_SCHEMA_VERSION_DISCRIMINATOR = 5;

export function getChangeSchemaVersionDiscriminatorBytes() {
  return getU8Encoder().encode(CHANGE_SCHEMA_VERSION_DISCRIMINATOR);
}

export type ChangeSchemaVersionInstruction<
  TProgram extends string = typeof SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountCredential extends string | IAccountMeta<string> = string,
  TAccountExistingSchema extends string | IAccountMeta<string> = string,
  TAccountNewSchema extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountCredential extends string
        ? ReadonlyAccount<TAccountCredential>
        : TAccountCredential,
      TAccountExistingSchema extends string
        ? ReadonlyAccount<TAccountExistingSchema>
        : TAccountExistingSchema,
      TAccountNewSchema extends string
        ? WritableAccount<TAccountNewSchema>
        : TAccountNewSchema,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ChangeSchemaVersionInstructionData = {
  discriminator: number;
  layout: ReadonlyUint8Array;
  fieldNames: Array<string>;
};

export type ChangeSchemaVersionInstructionDataArgs = {
  layout: ReadonlyUint8Array;
  fieldNames: Array<string>;
};

export function getChangeSchemaVersionInstructionDataEncoder(): Encoder<ChangeSchemaVersionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['layout', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      [
        'fieldNames',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: CHANGE_SCHEMA_VERSION_DISCRIMINATOR,
    })
  );
}

export function getChangeSchemaVersionInstructionDataDecoder(): Decoder<ChangeSchemaVersionInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['layout', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    [
      'fieldNames',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getChangeSchemaVersionInstructionDataCodec(): Codec<
  ChangeSchemaVersionInstructionDataArgs,
  ChangeSchemaVersionInstructionData
> {
  return combineCodec(
    getChangeSchemaVersionInstructionDataEncoder(),
    getChangeSchemaVersionInstructionDataDecoder()
  );
}

export type ChangeSchemaVersionInput<
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountCredential extends string = string,
  TAccountExistingSchema extends string = string,
  TAccountNewSchema extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  authority: TransactionSigner<TAccountAuthority>;
  /** Credential the Schema is associated with */
  credential: Address<TAccountCredential>;
  existingSchema: Address<TAccountExistingSchema>;
  newSchema: Address<TAccountNewSchema>;
  systemProgram?: Address<TAccountSystemProgram>;
  layout: ChangeSchemaVersionInstructionDataArgs['layout'];
  fieldNames: ChangeSchemaVersionInstructionDataArgs['fieldNames'];
};

export function getChangeSchemaVersionInstruction<
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountCredential extends string,
  TAccountExistingSchema extends string,
  TAccountNewSchema extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS,
>(
  input: ChangeSchemaVersionInput<
    TAccountPayer,
    TAccountAuthority,
    TAccountCredential,
    TAccountExistingSchema,
    TAccountNewSchema,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ChangeSchemaVersionInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountAuthority,
  TAccountCredential,
  TAccountExistingSchema,
  TAccountNewSchema,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    credential: { value: input.credential ?? null, isWritable: false },
    existingSchema: { value: input.existingSchema ?? null, isWritable: false },
    newSchema: { value: input.newSchema ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.credential),
      getAccountMeta(accounts.existingSchema),
      getAccountMeta(accounts.newSchema),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getChangeSchemaVersionInstructionDataEncoder().encode(
      args as ChangeSchemaVersionInstructionDataArgs
    ),
  } as ChangeSchemaVersionInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountCredential,
    TAccountExistingSchema,
    TAccountNewSchema,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedChangeSchemaVersionInstruction<
  TProgram extends string = typeof SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    authority: TAccountMetas[1];
    /** Credential the Schema is associated with */
    credential: TAccountMetas[2];
    existingSchema: TAccountMetas[3];
    newSchema: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: ChangeSchemaVersionInstructionData;
};

export function parseChangeSchemaVersionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedChangeSchemaVersionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      authority: getNextAccount(),
      credential: getNextAccount(),
      existingSchema: getNextAccount(),
      newSchema: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getChangeSchemaVersionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
