//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct CloseTokenizedAttestation {
    pub payer: solana_pubkey::Pubkey,
    /// Authorized signer of the Schema's Credential
    pub authority: solana_pubkey::Pubkey,

    pub credential: solana_pubkey::Pubkey,

    pub attestation: solana_pubkey::Pubkey,

    pub event_authority: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub attestation_program: solana_pubkey::Pubkey,
    /// Mint of Attestation Token
    pub attestation_mint: solana_pubkey::Pubkey,
    /// Program derived address used as program signer authority
    pub sas_pda: solana_pubkey::Pubkey,
    /// Associated token account of the related Attestation Token
    pub attestation_token_account: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,
}

impl CloseTokenizedAttestation {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.credential,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.attestation,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.attestation_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.attestation_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.sas_pda,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.attestation_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&CloseTokenizedAttestationInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::SOLANA_ATTESTATION_SERVICE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CloseTokenizedAttestationInstructionData {
    discriminator: u8,
}

impl CloseTokenizedAttestationInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 11 }
    }
}

impl Default for CloseTokenizedAttestationInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `CloseTokenizedAttestation`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[signer]` authority
///   2. `[]` credential
///   3. `[writable]` attestation
///   4. `[]` event_authority
///   5. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   6. `[]` attestation_program
///   7. `[writable]` attestation_mint
///   8. `[]` sas_pda
///   9. `[writable]` attestation_token_account
///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct CloseTokenizedAttestationBuilder {
    payer: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    credential: Option<solana_pubkey::Pubkey>,
    attestation: Option<solana_pubkey::Pubkey>,
    event_authority: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    attestation_program: Option<solana_pubkey::Pubkey>,
    attestation_mint: Option<solana_pubkey::Pubkey>,
    sas_pda: Option<solana_pubkey::Pubkey>,
    attestation_token_account: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CloseTokenizedAttestationBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// Authorized signer of the Schema's Credential
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn credential(&mut self, credential: solana_pubkey::Pubkey) -> &mut Self {
        self.credential = Some(credential);
        self
    }
    #[inline(always)]
    pub fn attestation(&mut self, attestation: solana_pubkey::Pubkey) -> &mut Self {
        self.attestation = Some(attestation);
        self
    }
    #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn attestation_program(&mut self, attestation_program: solana_pubkey::Pubkey) -> &mut Self {
        self.attestation_program = Some(attestation_program);
        self
    }
    /// Mint of Attestation Token
    #[inline(always)]
    pub fn attestation_mint(&mut self, attestation_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.attestation_mint = Some(attestation_mint);
        self
    }
    /// Program derived address used as program signer authority
    #[inline(always)]
    pub fn sas_pda(&mut self, sas_pda: solana_pubkey::Pubkey) -> &mut Self {
        self.sas_pda = Some(sas_pda);
        self
    }
    /// Associated token account of the related Attestation Token
    #[inline(always)]
    pub fn attestation_token_account(
        &mut self,
        attestation_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.attestation_token_account = Some(attestation_token_account);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CloseTokenizedAttestation {
            payer: self.payer.expect("payer is not set"),
            authority: self.authority.expect("authority is not set"),
            credential: self.credential.expect("credential is not set"),
            attestation: self.attestation.expect("attestation is not set"),
            event_authority: self.event_authority.expect("event_authority is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            attestation_program: self
                .attestation_program
                .expect("attestation_program is not set"),
            attestation_mint: self.attestation_mint.expect("attestation_mint is not set"),
            sas_pda: self.sas_pda.expect("sas_pda is not set"),
            attestation_token_account: self
                .attestation_token_account
                .expect("attestation_token_account is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `close_tokenized_attestation` CPI accounts.
pub struct CloseTokenizedAttestationCpiAccounts<'a, 'b> {
    pub payer: &'b solana_account_info::AccountInfo<'a>,
    /// Authorized signer of the Schema's Credential
    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub credential: &'b solana_account_info::AccountInfo<'a>,

    pub attestation: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub attestation_program: &'b solana_account_info::AccountInfo<'a>,
    /// Mint of Attestation Token
    pub attestation_mint: &'b solana_account_info::AccountInfo<'a>,
    /// Program derived address used as program signer authority
    pub sas_pda: &'b solana_account_info::AccountInfo<'a>,
    /// Associated token account of the related Attestation Token
    pub attestation_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `close_tokenized_attestation` CPI instruction.
pub struct CloseTokenizedAttestationCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,
    /// Authorized signer of the Schema's Credential
    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub credential: &'b solana_account_info::AccountInfo<'a>,

    pub attestation: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub attestation_program: &'b solana_account_info::AccountInfo<'a>,
    /// Mint of Attestation Token
    pub attestation_mint: &'b solana_account_info::AccountInfo<'a>,
    /// Program derived address used as program signer authority
    pub sas_pda: &'b solana_account_info::AccountInfo<'a>,
    /// Associated token account of the related Attestation Token
    pub attestation_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> CloseTokenizedAttestationCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CloseTokenizedAttestationCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            authority: accounts.authority,
            credential: accounts.credential,
            attestation: accounts.attestation,
            event_authority: accounts.event_authority,
            system_program: accounts.system_program,
            attestation_program: accounts.attestation_program,
            attestation_mint: accounts.attestation_mint,
            sas_pda: accounts.sas_pda,
            attestation_token_account: accounts.attestation_token_account,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.credential.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.attestation.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.attestation_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.attestation_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.sas_pda.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.attestation_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&CloseTokenizedAttestationInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::SOLANA_ATTESTATION_SERVICE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.credential.clone());
        account_infos.push(self.attestation.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.attestation_program.clone());
        account_infos.push(self.attestation_mint.clone());
        account_infos.push(self.sas_pda.clone());
        account_infos.push(self.attestation_token_account.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CloseTokenizedAttestation` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[signer]` authority
///   2. `[]` credential
///   3. `[writable]` attestation
///   4. `[]` event_authority
///   5. `[]` system_program
///   6. `[]` attestation_program
///   7. `[writable]` attestation_mint
///   8. `[]` sas_pda
///   9. `[writable]` attestation_token_account
///   10. `[]` token_program
#[derive(Clone, Debug)]
pub struct CloseTokenizedAttestationCpiBuilder<'a, 'b> {
    instruction: Box<CloseTokenizedAttestationCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CloseTokenizedAttestationCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CloseTokenizedAttestationCpiBuilderInstruction {
            __program: program,
            payer: None,
            authority: None,
            credential: None,
            attestation: None,
            event_authority: None,
            system_program: None,
            attestation_program: None,
            attestation_mint: None,
            sas_pda: None,
            attestation_token_account: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// Authorized signer of the Schema's Credential
    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn credential(
        &mut self,
        credential: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.credential = Some(credential);
        self
    }
    #[inline(always)]
    pub fn attestation(
        &mut self,
        attestation: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.attestation = Some(attestation);
        self
    }
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn attestation_program(
        &mut self,
        attestation_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.attestation_program = Some(attestation_program);
        self
    }
    /// Mint of Attestation Token
    #[inline(always)]
    pub fn attestation_mint(
        &mut self,
        attestation_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.attestation_mint = Some(attestation_mint);
        self
    }
    /// Program derived address used as program signer authority
    #[inline(always)]
    pub fn sas_pda(&mut self, sas_pda: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.sas_pda = Some(sas_pda);
        self
    }
    /// Associated token account of the related Attestation Token
    #[inline(always)]
    pub fn attestation_token_account(
        &mut self,
        attestation_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.attestation_token_account = Some(attestation_token_account);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = CloseTokenizedAttestationCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            credential: self.instruction.credential.expect("credential is not set"),

            attestation: self
                .instruction
                .attestation
                .expect("attestation is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            attestation_program: self
                .instruction
                .attestation_program
                .expect("attestation_program is not set"),

            attestation_mint: self
                .instruction
                .attestation_mint
                .expect("attestation_mint is not set"),

            sas_pda: self.instruction.sas_pda.expect("sas_pda is not set"),

            attestation_token_account: self
                .instruction
                .attestation_token_account
                .expect("attestation_token_account is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CloseTokenizedAttestationCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    credential: Option<&'b solana_account_info::AccountInfo<'a>>,
    attestation: Option<&'b solana_account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    attestation_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    attestation_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    sas_pda: Option<&'b solana_account_info::AccountInfo<'a>>,
    attestation_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
