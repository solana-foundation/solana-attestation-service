//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_pubkey::Pubkey;

/// Accounts.
#[derive(Debug)]
pub struct CreateTokenizedAttestation {
    pub payer: solana_pubkey::Pubkey,
    /// Authorized signer of the Schema's Credential
    pub authority: solana_pubkey::Pubkey,
    /// Credential the Schema is associated with
    pub credential: solana_pubkey::Pubkey,
    /// Schema the Attestation is associated with
    pub schema: solana_pubkey::Pubkey,

    pub attestation: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
    /// Mint of Schema Token
    pub schema_mint: solana_pubkey::Pubkey,
    /// Mint of Attestation Token
    pub attestation_mint: solana_pubkey::Pubkey,
    /// Program derived address used as program signer authority
    pub sas_pda: solana_pubkey::Pubkey,
    /// Associated token account of Recipient for Attestation Token
    pub recipient_token_account: solana_pubkey::Pubkey,
    /// Wallet to receive Attestation Token
    pub recipient: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,

    pub associated_token_program: solana_pubkey::Pubkey,
}

impl CreateTokenizedAttestation {
    pub fn instruction(
        &self,
        args: CreateTokenizedAttestationInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateTokenizedAttestationInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.credential,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.schema,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.attestation,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.schema_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.attestation_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.sas_pda,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.recipient_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.recipient,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreateTokenizedAttestationInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SOLANA_ATTESTATION_SERVICE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateTokenizedAttestationInstructionData {
    discriminator: u8,
}

impl CreateTokenizedAttestationInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 10 }
    }
}

impl Default for CreateTokenizedAttestationInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateTokenizedAttestationInstructionArgs {
    pub nonce: Pubkey,
    pub data: Vec<u8>,
    pub expiry: i64,
    pub name: String,
    pub uri: String,
    pub symbol: String,
    pub mint_account_space: u16,
}

/// Instruction builder for `CreateTokenizedAttestation`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[signer]` authority
///   2. `[]` credential
///   3. `[]` schema
///   4. `[writable]` attestation
///   5. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   6. `[writable]` schema_mint
///   7. `[writable]` attestation_mint
///   8. `[]` sas_pda
///   9. `[writable]` recipient_token_account
///   10. `[]` recipient
///   11. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   12. `[]` associated_token_program
#[derive(Clone, Debug, Default)]
pub struct CreateTokenizedAttestationBuilder {
    payer: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    credential: Option<solana_pubkey::Pubkey>,
    schema: Option<solana_pubkey::Pubkey>,
    attestation: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    schema_mint: Option<solana_pubkey::Pubkey>,
    attestation_mint: Option<solana_pubkey::Pubkey>,
    sas_pda: Option<solana_pubkey::Pubkey>,
    recipient_token_account: Option<solana_pubkey::Pubkey>,
    recipient: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    associated_token_program: Option<solana_pubkey::Pubkey>,
    nonce: Option<Pubkey>,
    data: Option<Vec<u8>>,
    expiry: Option<i64>,
    name: Option<String>,
    uri: Option<String>,
    symbol: Option<String>,
    mint_account_space: Option<u16>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CreateTokenizedAttestationBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// Authorized signer of the Schema's Credential
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// Credential the Schema is associated with
    #[inline(always)]
    pub fn credential(&mut self, credential: solana_pubkey::Pubkey) -> &mut Self {
        self.credential = Some(credential);
        self
    }
    /// Schema the Attestation is associated with
    #[inline(always)]
    pub fn schema(&mut self, schema: solana_pubkey::Pubkey) -> &mut Self {
        self.schema = Some(schema);
        self
    }
    #[inline(always)]
    pub fn attestation(&mut self, attestation: solana_pubkey::Pubkey) -> &mut Self {
        self.attestation = Some(attestation);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Mint of Schema Token
    #[inline(always)]
    pub fn schema_mint(&mut self, schema_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.schema_mint = Some(schema_mint);
        self
    }
    /// Mint of Attestation Token
    #[inline(always)]
    pub fn attestation_mint(&mut self, attestation_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.attestation_mint = Some(attestation_mint);
        self
    }
    /// Program derived address used as program signer authority
    #[inline(always)]
    pub fn sas_pda(&mut self, sas_pda: solana_pubkey::Pubkey) -> &mut Self {
        self.sas_pda = Some(sas_pda);
        self
    }
    /// Associated token account of Recipient for Attestation Token
    #[inline(always)]
    pub fn recipient_token_account(
        &mut self,
        recipient_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.recipient_token_account = Some(recipient_token_account);
        self
    }
    /// Wallet to receive Attestation Token
    #[inline(always)]
    pub fn recipient(&mut self, recipient: solana_pubkey::Pubkey) -> &mut Self {
        self.recipient = Some(recipient);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }
    #[inline(always)]
    pub fn nonce(&mut self, nonce: Pubkey) -> &mut Self {
        self.nonce = Some(nonce);
        self
    }
    #[inline(always)]
    pub fn data(&mut self, data: Vec<u8>) -> &mut Self {
        self.data = Some(data);
        self
    }
    #[inline(always)]
    pub fn expiry(&mut self, expiry: i64) -> &mut Self {
        self.expiry = Some(expiry);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn uri(&mut self, uri: String) -> &mut Self {
        self.uri = Some(uri);
        self
    }
    #[inline(always)]
    pub fn symbol(&mut self, symbol: String) -> &mut Self {
        self.symbol = Some(symbol);
        self
    }
    #[inline(always)]
    pub fn mint_account_space(&mut self, mint_account_space: u16) -> &mut Self {
        self.mint_account_space = Some(mint_account_space);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CreateTokenizedAttestation {
            payer: self.payer.expect("payer is not set"),
            authority: self.authority.expect("authority is not set"),
            credential: self.credential.expect("credential is not set"),
            schema: self.schema.expect("schema is not set"),
            attestation: self.attestation.expect("attestation is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            schema_mint: self.schema_mint.expect("schema_mint is not set"),
            attestation_mint: self.attestation_mint.expect("attestation_mint is not set"),
            sas_pda: self.sas_pda.expect("sas_pda is not set"),
            recipient_token_account: self
                .recipient_token_account
                .expect("recipient_token_account is not set"),
            recipient: self.recipient.expect("recipient is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self
                .associated_token_program
                .expect("associated_token_program is not set"),
        };
        let args = CreateTokenizedAttestationInstructionArgs {
            nonce: self.nonce.clone().expect("nonce is not set"),
            data: self.data.clone().expect("data is not set"),
            expiry: self.expiry.clone().expect("expiry is not set"),
            name: self.name.clone().expect("name is not set"),
            uri: self.uri.clone().expect("uri is not set"),
            symbol: self.symbol.clone().expect("symbol is not set"),
            mint_account_space: self
                .mint_account_space
                .clone()
                .expect("mint_account_space is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_tokenized_attestation` CPI accounts.
pub struct CreateTokenizedAttestationCpiAccounts<'a, 'b> {
    pub payer: &'b solana_account_info::AccountInfo<'a>,
    /// Authorized signer of the Schema's Credential
    pub authority: &'b solana_account_info::AccountInfo<'a>,
    /// Credential the Schema is associated with
    pub credential: &'b solana_account_info::AccountInfo<'a>,
    /// Schema the Attestation is associated with
    pub schema: &'b solana_account_info::AccountInfo<'a>,

    pub attestation: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// Mint of Schema Token
    pub schema_mint: &'b solana_account_info::AccountInfo<'a>,
    /// Mint of Attestation Token
    pub attestation_mint: &'b solana_account_info::AccountInfo<'a>,
    /// Program derived address used as program signer authority
    pub sas_pda: &'b solana_account_info::AccountInfo<'a>,
    /// Associated token account of Recipient for Attestation Token
    pub recipient_token_account: &'b solana_account_info::AccountInfo<'a>,
    /// Wallet to receive Attestation Token
    pub recipient: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `create_tokenized_attestation` CPI instruction.
pub struct CreateTokenizedAttestationCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,
    /// Authorized signer of the Schema's Credential
    pub authority: &'b solana_account_info::AccountInfo<'a>,
    /// Credential the Schema is associated with
    pub credential: &'b solana_account_info::AccountInfo<'a>,
    /// Schema the Attestation is associated with
    pub schema: &'b solana_account_info::AccountInfo<'a>,

    pub attestation: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// Mint of Schema Token
    pub schema_mint: &'b solana_account_info::AccountInfo<'a>,
    /// Mint of Attestation Token
    pub attestation_mint: &'b solana_account_info::AccountInfo<'a>,
    /// Program derived address used as program signer authority
    pub sas_pda: &'b solana_account_info::AccountInfo<'a>,
    /// Associated token account of Recipient for Attestation Token
    pub recipient_token_account: &'b solana_account_info::AccountInfo<'a>,
    /// Wallet to receive Attestation Token
    pub recipient: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateTokenizedAttestationInstructionArgs,
}

impl<'a, 'b> CreateTokenizedAttestationCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CreateTokenizedAttestationCpiAccounts<'a, 'b>,
        args: CreateTokenizedAttestationInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            authority: accounts.authority,
            credential: accounts.credential,
            schema: accounts.schema,
            attestation: accounts.attestation,
            system_program: accounts.system_program,
            schema_mint: accounts.schema_mint,
            attestation_mint: accounts.attestation_mint,
            sas_pda: accounts.sas_pda,
            recipient_token_account: accounts.recipient_token_account,
            recipient: accounts.recipient,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.credential.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.schema.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.attestation.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.schema_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.attestation_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.sas_pda.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.recipient_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.recipient.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreateTokenizedAttestationInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SOLANA_ATTESTATION_SERVICE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(14 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.credential.clone());
        account_infos.push(self.schema.clone());
        account_infos.push(self.attestation.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.schema_mint.clone());
        account_infos.push(self.attestation_mint.clone());
        account_infos.push(self.sas_pda.clone());
        account_infos.push(self.recipient_token_account.clone());
        account_infos.push(self.recipient.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateTokenizedAttestation` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[signer]` authority
///   2. `[]` credential
///   3. `[]` schema
///   4. `[writable]` attestation
///   5. `[]` system_program
///   6. `[writable]` schema_mint
///   7. `[writable]` attestation_mint
///   8. `[]` sas_pda
///   9. `[writable]` recipient_token_account
///   10. `[]` recipient
///   11. `[]` token_program
///   12. `[]` associated_token_program
#[derive(Clone, Debug)]
pub struct CreateTokenizedAttestationCpiBuilder<'a, 'b> {
    instruction: Box<CreateTokenizedAttestationCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateTokenizedAttestationCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateTokenizedAttestationCpiBuilderInstruction {
            __program: program,
            payer: None,
            authority: None,
            credential: None,
            schema: None,
            attestation: None,
            system_program: None,
            schema_mint: None,
            attestation_mint: None,
            sas_pda: None,
            recipient_token_account: None,
            recipient: None,
            token_program: None,
            associated_token_program: None,
            nonce: None,
            data: None,
            expiry: None,
            name: None,
            uri: None,
            symbol: None,
            mint_account_space: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// Authorized signer of the Schema's Credential
    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    /// Credential the Schema is associated with
    #[inline(always)]
    pub fn credential(
        &mut self,
        credential: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.credential = Some(credential);
        self
    }
    /// Schema the Attestation is associated with
    #[inline(always)]
    pub fn schema(&mut self, schema: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.schema = Some(schema);
        self
    }
    #[inline(always)]
    pub fn attestation(
        &mut self,
        attestation: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.attestation = Some(attestation);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Mint of Schema Token
    #[inline(always)]
    pub fn schema_mint(
        &mut self,
        schema_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.schema_mint = Some(schema_mint);
        self
    }
    /// Mint of Attestation Token
    #[inline(always)]
    pub fn attestation_mint(
        &mut self,
        attestation_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.attestation_mint = Some(attestation_mint);
        self
    }
    /// Program derived address used as program signer authority
    #[inline(always)]
    pub fn sas_pda(&mut self, sas_pda: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.sas_pda = Some(sas_pda);
        self
    }
    /// Associated token account of Recipient for Attestation Token
    #[inline(always)]
    pub fn recipient_token_account(
        &mut self,
        recipient_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recipient_token_account = Some(recipient_token_account);
        self
    }
    /// Wallet to receive Attestation Token
    #[inline(always)]
    pub fn recipient(&mut self, recipient: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.recipient = Some(recipient);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }
    #[inline(always)]
    pub fn nonce(&mut self, nonce: Pubkey) -> &mut Self {
        self.instruction.nonce = Some(nonce);
        self
    }
    #[inline(always)]
    pub fn data(&mut self, data: Vec<u8>) -> &mut Self {
        self.instruction.data = Some(data);
        self
    }
    #[inline(always)]
    pub fn expiry(&mut self, expiry: i64) -> &mut Self {
        self.instruction.expiry = Some(expiry);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn uri(&mut self, uri: String) -> &mut Self {
        self.instruction.uri = Some(uri);
        self
    }
    #[inline(always)]
    pub fn symbol(&mut self, symbol: String) -> &mut Self {
        self.instruction.symbol = Some(symbol);
        self
    }
    #[inline(always)]
    pub fn mint_account_space(&mut self, mint_account_space: u16) -> &mut Self {
        self.instruction.mint_account_space = Some(mint_account_space);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = CreateTokenizedAttestationInstructionArgs {
            nonce: self.instruction.nonce.clone().expect("nonce is not set"),
            data: self.instruction.data.clone().expect("data is not set"),
            expiry: self.instruction.expiry.clone().expect("expiry is not set"),
            name: self.instruction.name.clone().expect("name is not set"),
            uri: self.instruction.uri.clone().expect("uri is not set"),
            symbol: self.instruction.symbol.clone().expect("symbol is not set"),
            mint_account_space: self
                .instruction
                .mint_account_space
                .clone()
                .expect("mint_account_space is not set"),
        };
        let instruction = CreateTokenizedAttestationCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            credential: self.instruction.credential.expect("credential is not set"),

            schema: self.instruction.schema.expect("schema is not set"),

            attestation: self
                .instruction
                .attestation
                .expect("attestation is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            schema_mint: self
                .instruction
                .schema_mint
                .expect("schema_mint is not set"),

            attestation_mint: self
                .instruction
                .attestation_mint
                .expect("attestation_mint is not set"),

            sas_pda: self.instruction.sas_pda.expect("sas_pda is not set"),

            recipient_token_account: self
                .instruction
                .recipient_token_account
                .expect("recipient_token_account is not set"),

            recipient: self.instruction.recipient.expect("recipient is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateTokenizedAttestationCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    credential: Option<&'b solana_account_info::AccountInfo<'a>>,
    schema: Option<&'b solana_account_info::AccountInfo<'a>>,
    attestation: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    schema_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    attestation_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    sas_pda: Option<&'b solana_account_info::AccountInfo<'a>>,
    recipient_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    recipient: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    nonce: Option<Pubkey>,
    data: Option<Vec<u8>>,
    expiry: Option<i64>,
    name: Option<String>,
    uri: Option<String>,
    symbol: Option<String>,
    mint_account_space: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
